name: Presubmit Workflow
run-name: Presubmit ${{github.ref_name}} ${{github.event_name}}-${{github.event.pull_request.number}} (${{github.event.action}})

on:
  push:
    branches: [ "github_**" ]
  pull_request:
    branches: [ "github_actions" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Project
      uses: actions/checkout@v4

    - name: Checkout Submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build

    - name: Build Protoc
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Run CTest
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest

    - name: Prepare Java Build
      run: ln -sfn build/protoc protoc

    - name: Build Java
      working-directory: ${{github.workspace}}/java
      run: mvn package

